
com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  000005ce  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  000005e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001091  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a9  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f6  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f8  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000808  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e3       	ldi	r30, 0x34	; 52
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 30       	cpi	r26, 0x0A	; 10
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	12 d0       	rcall	.+36     	; 0x104 <main>
  e0:	27 c2       	rjmp	.+1102   	; 0x530 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <initUART>:
#define PACKET_SIZE 16

void initUART(void)
{
	//UBRR1 = (F_CPU / 4/ baud - 1) / 2;
	UBRR1 = 25;  //38.4k baud
  e4:	89 e1       	ldi	r24, 0x19	; 25
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 cd 00 	sts	0x00CD, r25
  ec:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1A = (1<<U2X1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 c8 00 	sts	0x00C8, r24
  	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 ca 00 	sts	0x00CA, r24
 102:	08 95       	ret

00000104 <main>:
}



int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62

	uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	e7 d0       	rcall	.+462    	; 0x2e2 <malloc>
 114:	08 2f       	mov	r16, r24
 116:	f9 2e       	mov	r15, r25
 118:	80 e8       	ldi	r24, 0x80	; 128


	CPU_PRESCALE(0x01);  // run at 8 MHz
 11a:	80 93 61 00 	sts	0x0061, r24
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 61 00 	sts	0x0061, r24
 124:	84 9a       	sbi	0x10, 4	; 16

	INIT_CSN;
 126:	81 9a       	sbi	0x10, 1	; 16
	INIT_CE;
 128:	8c 9a       	sbi	0x11, 4	; 17
	CSN_HIGH;
 12a:	89 9a       	sbi	0x11, 1	; 17
	CE_HIGH;
 12c:	db df       	rcall	.-74     	; 0xe4 <initUART>


	initUART();
 12e:	3f d0       	rcall	.+126    	; 0x1ae <SPI_masterInit>
 130:	59 d0       	rcall	.+178    	; 0x1e4 <initRadioRX>

	// Put receiver in sleep mode

	SPI_masterInit();
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	5d d0       	rcall	.+186    	; 0x1f0 <setRadioAddressWidth>
	initRadioRX();
 136:	63 e2       	ldi	r22, 0x23	; 35
 138:	71 ec       	ldi	r23, 0xC1	; 193

	setRadioAddressWidth(THREE_BYTES);
 13a:	8b ea       	ldi	r24, 0xAB	; 171
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	6a d0       	rcall	.+212    	; 0x214 <setRadioRXAddress>
	setRadioRXAddress(0xABC123);
 140:	60 e1       	ldi	r22, 0x10	; 16
 142:	81 e1       	ldi	r24, 0x11	; 17
 144:	7e d0       	rcall	.+252    	; 0x242 <setRadioRXPayloadSize>
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	97 e2       	ldi	r25, 0x27	; 39
 14a:	01 97       	sbiw	r24, 0x01	; 1
	setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x46>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x4c>
 150:	00 00       	nop
 152:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	56 d0       	rcall	.+172    	; 0x202 <setRadioFrequency>
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	a1 d0       	rcall	.+322    	; 0x2a2 <getRadioStatus>

	_delay_ms(5);

  	int8_t radioFrequency = 0b00000000;
  	setRadioFrequency(radioFrequency);
 160:	aa d0       	rcall	.+340    	; 0x2b6 <getRX_DR>
 162:	88 23       	and	r24, r24
 164:	b9 f0       	breq	.+46     	; 0x194 <main+0x90>
	setRadioRXAddress(0xABC123);
	setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);

	_delay_ms(5);

  	int8_t radioFrequency = 0b00000000;
 166:	b7 d0       	rcall	.+366    	; 0x2d6 <clearRX_DR>
  	setRadioFrequency(radioFrequency);

	while (1) {


		uint8_t radioStatus = 0;
 168:	60 e1       	ldi	r22, 0x10	; 16

		getRadioStatus(&radioStatus);
 16a:	80 2f       	mov	r24, r16
 16c:	9f 2d       	mov	r25, r15
 16e:	7c d0       	rcall	.+248    	; 0x268 <getRadioRXPayload>
 170:	89 98       	cbi	0x11, 1	; 17

		if(getRX_DR())  // if RX data received
 172:	e0 2f       	mov	r30, r16
 174:	ff 2d       	mov	r31, r15
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
		{
			clearRX_DR();
 17a:	80 91 c8 00 	lds	r24, 0x00C8

      		getRadioRXPayload(load, PACKET_SIZE); //read payload
 17e:	85 ff       	sbrs	r24, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <main+0x76>
 182:	81 91       	ld	r24, Z+
 184:	80 93 ce 00 	sts	0x00CE, r24

			CE_LOW;
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	20 31       	cpi	r18, 0x10	; 16

			for(int i = 0; i<PACKET_SIZE; i++)
 18e:	31 05       	cpc	r19, r1
 190:	a1 f7       	brne	.-24     	; 0x17a <main+0x76>
			{
       		while(!(UCSR1A & (1 << UDRE1)));
 192:	89 9a       	sbi	0x11, 1	; 17
 194:	1f 5f       	subi	r17, 0xFF	; 255
 196:	1e 31       	cpi	r17, 0x1E	; 30
 198:	09 f4       	brne	.+2      	; 0x19c <main+0x98>
        	UDR1 = load[i];
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	81 2f       	mov	r24, r17
 19e:	31 d0       	rcall	.+98     	; 0x202 <setRadioFrequency>

      		getRadioRXPayload(load, PACKET_SIZE); //read payload

			CE_LOW;

			for(int i = 0; i<PACKET_SIZE; i++)
 1a0:	8f e7       	ldi	r24, 0x7F	; 127
 1a2:	9e e3       	ldi	r25, 0x3E	; 62
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0xa0>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xa6>
			{
       		while(!(UCSR1A & (1 << UDRE1)));
        	UDR1 = load[i];
			}

			CE_HIGH;
 1aa:	00 00       	nop

    /* while(!(UCSR1A & (1 << UDRE1))); */
    /* UDR1 = radioStatus; */

		
    	radioFrequency += 0b00000001;
 1ac:	d5 cf       	rjmp	.-86     	; 0x158 <main+0x54>

000001ae <SPI_masterInit>:
/************* Basic SPI Functions ****************/

void SPI_masterInit(){

  /* Set MOSI, /SS and SCK to output, all others to input */
  DDRB = ((1<<DDB0) | (1<<DDB2) | (1<<DDB1));
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	84 b9       	out	0x04, r24	; 4

  /* Enable SPI and Master mode, set clock rate to fck/4 */
  SPCR = (1<<SPE) | (1<<MSTR);
 1b2:	80 e5       	ldi	r24, 0x50	; 80
 1b4:	8c bd       	out	0x2c, r24	; 44
 1b6:	08 95       	ret

000001b8 <SPI_masterReceive>:
}


int8_t SPI_masterReceive(void){

  SPDR = 0xFF; 			// Dummy variable
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF))){}
 1bc:	0d b4       	in	r0, 0x2d	; 45
 1be:	07 fe       	sbrs	r0, 7
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <SPI_masterReceive+0x4>
  return SPDR;
 1c2:	8e b5       	in	r24, 0x2e	; 46
}
 1c4:	08 95       	ret

000001c6 <SPI_masterTransmit>:

int8_t SPI_masterTransmit(int8_t cData){

  SPDR = cData;
 1c6:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & (1<<SPIF))){}
 1c8:	0d b4       	in	r0, 0x2d	; 45
 1ca:	07 fe       	sbrs	r0, 7
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <SPI_masterTransmit+0x2>
  return SPDR;
 1ce:	8e b5       	in	r24, 0x2e	; 46
}
 1d0:	08 95       	ret

000001d2 <openPort>:

/*************** PORT OPERATIONS ****************/

void openPort(){

  CSN_LOW;
 1d2:	8c 98       	cbi	0x11, 4	; 17
 1d4:	08 95       	ret

000001d6 <closePort>:
}

void closePort(){ 

  CSN_HIGH;        // sets port high
 1d6:	8c 9a       	sbi	0x11, 4	; 17
  while(!(CSN_PIN_R &= (1<<CSN_PIN)));    //while port is low
 1d8:	8f b1       	in	r24, 0x0f	; 15
 1da:	80 71       	andi	r24, 0x10	; 16
 1dc:	8f b9       	out	0x0f, r24	; 15
 1de:	88 23       	and	r24, r24
 1e0:	d9 f3       	breq	.-10     	; 0x1d8 <closePort+0x2>

}
 1e2:	08 95       	ret

000001e4 <initRadioRX>:
  closePort();
}

void initRadioRX(){

  openPort(); 
 1e4:	f6 df       	rcall	.-20     	; 0x1d2 <openPort>
 1e6:	80 e2       	ldi	r24, 0x20	; 32
  SPI_masterTransmit(0b00100000);
 1e8:	ee df       	rcall	.-36     	; 0x1c6 <SPI_masterTransmit>
 1ea:	8b e0       	ldi	r24, 0x0B	; 11
 1ec:	ec df       	rcall	.-40     	; 0x1c6 <SPI_masterTransmit>
  SPI_masterTransmit(0b00001011);  // sets RX mode on 
 1ee:	f3 cf       	rjmp	.-26     	; 0x1d6 <closePort>

000001f0 <setRadioAddressWidth>:
 1f0:	cf 93       	push	r28
 1f2:	c8 2f       	mov	r28, r24
  closePort();
 1f4:	ee df       	rcall	.-36     	; 0x1d2 <openPort>
 1f6:	83 e2       	ldi	r24, 0x23	; 35
/*************************************************************/

void setRadioAddressWidth(uint8_t width){

  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
 1f8:	e6 df       	rcall	.-52     	; 0x1c6 <SPI_masterTransmit>
 1fa:	8c 2f       	mov	r24, r28
 1fc:	e4 df       	rcall	.-56     	; 0x1c6 <SPI_masterTransmit>
  SPI_masterTransmit(width);  // sets address 
 1fe:	cf 91       	pop	r28
 200:	ea cf       	rjmp	.-44     	; 0x1d6 <closePort>

00000202 <setRadioFrequency>:
 202:	cf 93       	push	r28
  closePort();
}
 204:	c8 2f       	mov	r28, r24
void setRadioAddressWidth(uint8_t width){

  openPort();
  SPI_masterTransmit(0b00100011);  // setup_aw register
  SPI_masterTransmit(width);  // sets address 
  closePort();
 206:	e5 df       	rcall	.-54     	; 0x1d2 <openPort>
 208:	85 e2       	ldi	r24, 0x25	; 37
}

void setRadioFrequency(uint8_t frequency){

  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
 20a:	dd df       	rcall	.-70     	; 0x1c6 <SPI_masterTransmit>
 20c:	8c 2f       	mov	r24, r28
 20e:	db df       	rcall	.-74     	; 0x1c6 <SPI_masterTransmit>
  SPI_masterTransmit(frequency);  // sets frequency 
 210:	cf 91       	pop	r28
 212:	e1 cf       	rjmp	.-62     	; 0x1d6 <closePort>

00000214 <setRadioRXAddress>:
 214:	cf 93       	push	r28
  closePort(); 
}
 216:	df 93       	push	r29
void setRadioFrequency(uint8_t frequency){

  openPort();
  SPI_masterTransmit(0b00100101);  // addresses radio frequency register 
  SPI_masterTransmit(frequency);  // sets frequency 
  closePort(); 
 218:	00 d0       	rcall	.+0      	; 0x21a <setRadioRXAddress+0x6>
 21a:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(addHigh); 

  closePort();
}

void setRadioRXAddress(int32_t address){
 21c:	de b7       	in	r29, 0x3e	; 62

  uint8_t addLow = address;
  uint8_t addMid = (address >> 8);
  uint8_t addHigh = (addMid >> 8);

  openPort();
 21e:	69 83       	std	Y+1, r22	; 0x01
 220:	7a 83       	std	Y+2, r23	; 0x02
 222:	d7 df       	rcall	.-82     	; 0x1d2 <openPort>
 224:	8a e2       	ldi	r24, 0x2A	; 42
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
 226:	cf df       	rcall	.-98     	; 0x1c6 <SPI_masterTransmit>
 228:	69 81       	ldd	r22, Y+1	; 0x01
 22a:	86 2f       	mov	r24, r22
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
 22c:	cc df       	rcall	.-104    	; 0x1c6 <SPI_masterTransmit>
 22e:	7a 81       	ldd	r23, Y+2	; 0x02
 230:	87 2f       	mov	r24, r23
 232:	c9 df       	rcall	.-110    	; 0x1c6 <SPI_masterTransmit>
  SPI_masterTransmit(addMid); 
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	c7 df       	rcall	.-114    	; 0x1c6 <SPI_masterTransmit>
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
  SPI_masterTransmit(addHigh); 
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ca cf       	rjmp	.-108    	; 0x1d6 <closePort>

00000242 <setRadioRXPayloadSize>:

  closePort();
}
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <setRadioRXPayloadSize+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
  SPI_masterTransmit(0x2A);  // RX_ADDR_P0 register
  SPI_masterTransmit(addLow);  // receive address for data pipe 0
  SPI_masterTransmit(addMid); 
  SPI_masterTransmit(addHigh); 

  closePort();
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	6a 83       	std	Y+2, r22	; 0x02
  size is the number of bytes in PL from 1-32
 ************************************************************/

void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){

  openPort();
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	c0 df       	rcall	.-128    	; 0x1d2 <openPort>
 252:	89 81       	ldd	r24, Y+1	; 0x01
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
 254:	80 62       	ori	r24, 0x20	; 32
 256:	b7 df       	rcall	.-146    	; 0x1c6 <SPI_masterTransmit>
 258:	6a 81       	ldd	r22, Y+2	; 0x02
 25a:	86 2f       	mov	r24, r22
  SPI_masterTransmit(size);  // size of payload for data pipe
 25c:	b4 df       	rcall	.-152    	; 0x1c6 <SPI_masterTransmit>
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
  closePort();
}
 264:	cf 91       	pop	r28
 266:	b7 cf       	rjmp	.-146    	; 0x1d6 <closePort>

00000268 <getRadioRXPayload>:
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
void setRadioRXPayloadSize(uint8_t dataPipe, uint8_t size){

  openPort();
  SPI_masterTransmit(dataPipe | 0b00100000);  //address data pipe
  SPI_masterTransmit(size);  // size of payload for data pipe
  closePort();
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
  }
  closePort();
}


void getRadioRXPayload(uint8_t* payload, uint8_t payloadSize){
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	8c 01       	movw	r16, r24
 276:	e6 2e       	mov	r14, r22

  uint8_t radioStatus;
  openPort();
 278:	ac df       	rcall	.-168    	; 0x1d2 <openPort>
 27a:	81 e6       	ldi	r24, 0x61	; 97
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
 27c:	a4 df       	rcall	.-184    	; 0x1c6 <SPI_masterTransmit>
 27e:	e8 01       	movw	r28, r16
 280:	f1 2c       	mov	r15, r1
  for(int i = 0; i<payloadSize; i++){
 282:	ce 01       	movw	r24, r28
 284:	80 1b       	sub	r24, r16
 286:	91 0b       	sbc	r25, r17
 288:	8e 15       	cp	r24, r14
 28a:	9f 05       	cpc	r25, r15
 28c:	1c f4       	brge	.+6      	; 0x294 <getRadioRXPayload+0x2c>
 28e:	94 df       	rcall	.-216    	; 0x1b8 <SPI_masterReceive>
 290:	89 93       	st	Y+, r24

    payload[i] = SPI_masterReceive();
 292:	f7 cf       	rjmp	.-18     	; 0x282 <getRadioRXPayload+0x1a>
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
  }
  closePort();
}
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	9a cf       	rjmp	.-204    	; 0x1d6 <closePort>

000002a2 <getRadioStatus>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
  radioStatus = SPI_masterTransmit(0b01100001); //read payload 8 bytes
  for(int i = 0; i<payloadSize; i++){

    payload[i] = SPI_masterReceive();
  }
  closePort();
 2a6:	ec 01       	movw	r28, r24
 2a8:	94 df       	rcall	.-216    	; 0x1d2 <openPort>
}


void getRadioStatus(uint8_t* status){

  openPort();
 2aa:	87 e0       	ldi	r24, 0x07	; 7
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
 2ac:	8c df       	rcall	.-232    	; 0x1c6 <SPI_masterTransmit>
 2ae:	88 83       	st	Y, r24
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
  closePort();
}
 2b4:	90 cf       	rjmp	.-224    	; 0x1d6 <closePort>

000002b6 <getRX_DR>:
 2b6:	cf 93       	push	r28

void getRadioStatus(uint8_t* status){

  openPort();
  *status = SPI_masterTransmit(0x07);  // RX_ADDR_P0 register, radioStatus now == status
  closePort();
 2b8:	df 93       	push	r29
 2ba:	1f 92       	push	r1
/**************************************************
  Boolean valued functions. return 1 if bit
  is set, else returns 0 
 ***************************************************/

uint8_t getRX_DR(){
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62

  uint8_t status;
  getRadioStatus(&status);
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	ee df       	rcall	.-36     	; 0x2a2 <getRadioStatus>
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
  if(status & (1<<6))  // if RX_DR is set
 2c8:	86 fb       	bst	r24, 6
    return 1;
  else
    return 0;
}
 2ca:	88 27       	eor	r24, r24
 2cc:	80 f9       	bld	r24, 0
 2ce:	0f 90       	pop	r0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <clearRX_DR>:
 2d6:	7d df       	rcall	.-262    	; 0x1d2 <openPort>
}

void clearRX_DR(){

  uint8_t status;
  openPort();
 2d8:	87 e2       	ldi	r24, 0x27	; 39
  status = SPI_masterTransmit(0x07 | 0b00100000); 
 2da:	75 df       	rcall	.-278    	; 0x1c6 <SPI_masterTransmit>
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	73 df       	rcall	.-282    	; 0x1c6 <SPI_masterTransmit>
  SPI_masterTransmit(status |= (1<<6));  //reset receive bit
 2e0:	7a cf       	rjmp	.-268    	; 0x1d6 <closePort>

000002e2 <malloc>:
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
  closePort();
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	91 05       	cpc	r25, r1
 2ea:	10 f4       	brcc	.+4      	; 0x2f0 <malloc+0xe>
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	e0 91 08 01 	lds	r30, 0x0108
 2f4:	f0 91 09 01 	lds	r31, 0x0109
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	a0 e0       	ldi	r26, 0x00	; 0
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	30 97       	sbiw	r30, 0x00	; 0
 302:	39 f1       	breq	.+78     	; 0x352 <malloc+0x70>
 304:	40 81       	ld	r20, Z
 306:	51 81       	ldd	r21, Z+1	; 0x01
 308:	48 17       	cp	r20, r24
 30a:	59 07       	cpc	r21, r25
 30c:	b8 f0       	brcs	.+46     	; 0x33c <malloc+0x5a>
 30e:	48 17       	cp	r20, r24
 310:	59 07       	cpc	r21, r25
 312:	71 f4       	brne	.+28     	; 0x330 <malloc+0x4e>
 314:	82 81       	ldd	r24, Z+2	; 0x02
 316:	93 81       	ldd	r25, Z+3	; 0x03
 318:	10 97       	sbiw	r26, 0x00	; 0
 31a:	29 f0       	breq	.+10     	; 0x326 <malloc+0x44>
 31c:	13 96       	adiw	r26, 0x03	; 3
 31e:	9c 93       	st	X, r25
 320:	8e 93       	st	-X, r24
 322:	12 97       	sbiw	r26, 0x02	; 2
 324:	2c c0       	rjmp	.+88     	; 0x37e <malloc+0x9c>
 326:	90 93 09 01 	sts	0x0109, r25
 32a:	80 93 08 01 	sts	0x0108, r24
 32e:	27 c0       	rjmp	.+78     	; 0x37e <malloc+0x9c>
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	31 f0       	breq	.+12     	; 0x342 <malloc+0x60>
 336:	42 17       	cp	r20, r18
 338:	53 07       	cpc	r21, r19
 33a:	18 f0       	brcs	.+6      	; 0x342 <malloc+0x60>
 33c:	a9 01       	movw	r20, r18
 33e:	db 01       	movw	r26, r22
 340:	01 c0       	rjmp	.+2      	; 0x344 <malloc+0x62>
 342:	ef 01       	movw	r28, r30
 344:	9a 01       	movw	r18, r20
 346:	bd 01       	movw	r22, r26
 348:	df 01       	movw	r26, r30
 34a:	02 80       	ldd	r0, Z+2	; 0x02
 34c:	f3 81       	ldd	r31, Z+3	; 0x03
 34e:	e0 2d       	mov	r30, r0
 350:	d7 cf       	rjmp	.-82     	; 0x300 <malloc+0x1e>
 352:	21 15       	cp	r18, r1
 354:	31 05       	cpc	r19, r1
 356:	f9 f0       	breq	.+62     	; 0x396 <malloc+0xb4>
 358:	28 1b       	sub	r18, r24
 35a:	39 0b       	sbc	r19, r25
 35c:	24 30       	cpi	r18, 0x04	; 4
 35e:	31 05       	cpc	r19, r1
 360:	80 f4       	brcc	.+32     	; 0x382 <malloc+0xa0>
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	9b 81       	ldd	r25, Y+3	; 0x03
 366:	61 15       	cp	r22, r1
 368:	71 05       	cpc	r23, r1
 36a:	21 f0       	breq	.+8      	; 0x374 <malloc+0x92>
 36c:	fb 01       	movw	r30, r22
 36e:	93 83       	std	Z+3, r25	; 0x03
 370:	82 83       	std	Z+2, r24	; 0x02
 372:	04 c0       	rjmp	.+8      	; 0x37c <malloc+0x9a>
 374:	90 93 09 01 	sts	0x0109, r25
 378:	80 93 08 01 	sts	0x0108, r24
 37c:	fe 01       	movw	r30, r28
 37e:	32 96       	adiw	r30, 0x02	; 2
 380:	44 c0       	rjmp	.+136    	; 0x40a <malloc+0x128>
 382:	fe 01       	movw	r30, r28
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	81 93       	st	Z+, r24
 38a:	91 93       	st	Z+, r25
 38c:	22 50       	subi	r18, 0x02	; 2
 38e:	31 09       	sbc	r19, r1
 390:	39 83       	std	Y+1, r19	; 0x01
 392:	28 83       	st	Y, r18
 394:	3a c0       	rjmp	.+116    	; 0x40a <malloc+0x128>
 396:	20 91 06 01 	lds	r18, 0x0106
 39a:	30 91 07 01 	lds	r19, 0x0107
 39e:	23 2b       	or	r18, r19
 3a0:	41 f4       	brne	.+16     	; 0x3b2 <malloc+0xd0>
 3a2:	20 91 02 01 	lds	r18, 0x0102
 3a6:	30 91 03 01 	lds	r19, 0x0103
 3aa:	30 93 07 01 	sts	0x0107, r19
 3ae:	20 93 06 01 	sts	0x0106, r18
 3b2:	20 91 00 01 	lds	r18, 0x0100
 3b6:	30 91 01 01 	lds	r19, 0x0101
 3ba:	21 15       	cp	r18, r1
 3bc:	31 05       	cpc	r19, r1
 3be:	41 f4       	brne	.+16     	; 0x3d0 <malloc+0xee>
 3c0:	2d b7       	in	r18, 0x3d	; 61
 3c2:	3e b7       	in	r19, 0x3e	; 62
 3c4:	40 91 04 01 	lds	r20, 0x0104
 3c8:	50 91 05 01 	lds	r21, 0x0105
 3cc:	24 1b       	sub	r18, r20
 3ce:	35 0b       	sbc	r19, r21
 3d0:	e0 91 06 01 	lds	r30, 0x0106
 3d4:	f0 91 07 01 	lds	r31, 0x0107
 3d8:	e2 17       	cp	r30, r18
 3da:	f3 07       	cpc	r31, r19
 3dc:	a0 f4       	brcc	.+40     	; 0x406 <malloc+0x124>
 3de:	2e 1b       	sub	r18, r30
 3e0:	3f 0b       	sbc	r19, r31
 3e2:	28 17       	cp	r18, r24
 3e4:	39 07       	cpc	r19, r25
 3e6:	78 f0       	brcs	.+30     	; 0x406 <malloc+0x124>
 3e8:	ac 01       	movw	r20, r24
 3ea:	4e 5f       	subi	r20, 0xFE	; 254
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	24 17       	cp	r18, r20
 3f0:	35 07       	cpc	r19, r21
 3f2:	48 f0       	brcs	.+18     	; 0x406 <malloc+0x124>
 3f4:	4e 0f       	add	r20, r30
 3f6:	5f 1f       	adc	r21, r31
 3f8:	50 93 07 01 	sts	0x0107, r21
 3fc:	40 93 06 01 	sts	0x0106, r20
 400:	81 93       	st	Z+, r24
 402:	91 93       	st	Z+, r25
 404:	02 c0       	rjmp	.+4      	; 0x40a <malloc+0x128>
 406:	e0 e0       	ldi	r30, 0x00	; 0
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	cf 01       	movw	r24, r30
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <free>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	09 f4       	brne	.+2      	; 0x41c <free+0xa>
 41a:	87 c0       	rjmp	.+270    	; 0x52a <free+0x118>
 41c:	fc 01       	movw	r30, r24
 41e:	32 97       	sbiw	r30, 0x02	; 2
 420:	13 82       	std	Z+3, r1	; 0x03
 422:	12 82       	std	Z+2, r1	; 0x02
 424:	c0 91 08 01 	lds	r28, 0x0108
 428:	d0 91 09 01 	lds	r29, 0x0109
 42c:	20 97       	sbiw	r28, 0x00	; 0
 42e:	81 f4       	brne	.+32     	; 0x450 <free+0x3e>
 430:	20 81       	ld	r18, Z
 432:	31 81       	ldd	r19, Z+1	; 0x01
 434:	28 0f       	add	r18, r24
 436:	39 1f       	adc	r19, r25
 438:	80 91 06 01 	lds	r24, 0x0106
 43c:	90 91 07 01 	lds	r25, 0x0107
 440:	82 17       	cp	r24, r18
 442:	93 07       	cpc	r25, r19
 444:	79 f5       	brne	.+94     	; 0x4a4 <free+0x92>
 446:	f0 93 07 01 	sts	0x0107, r31
 44a:	e0 93 06 01 	sts	0x0106, r30
 44e:	6d c0       	rjmp	.+218    	; 0x52a <free+0x118>
 450:	de 01       	movw	r26, r28
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	ae 17       	cp	r26, r30
 458:	bf 07       	cpc	r27, r31
 45a:	50 f4       	brcc	.+20     	; 0x470 <free+0x5e>
 45c:	12 96       	adiw	r26, 0x02	; 2
 45e:	4d 91       	ld	r20, X+
 460:	5c 91       	ld	r21, X
 462:	13 97       	sbiw	r26, 0x03	; 3
 464:	9d 01       	movw	r18, r26
 466:	41 15       	cp	r20, r1
 468:	51 05       	cpc	r21, r1
 46a:	09 f1       	breq	.+66     	; 0x4ae <free+0x9c>
 46c:	da 01       	movw	r26, r20
 46e:	f3 cf       	rjmp	.-26     	; 0x456 <free+0x44>
 470:	b3 83       	std	Z+3, r27	; 0x03
 472:	a2 83       	std	Z+2, r26	; 0x02
 474:	40 81       	ld	r20, Z
 476:	51 81       	ldd	r21, Z+1	; 0x01
 478:	84 0f       	add	r24, r20
 47a:	95 1f       	adc	r25, r21
 47c:	8a 17       	cp	r24, r26
 47e:	9b 07       	cpc	r25, r27
 480:	71 f4       	brne	.+28     	; 0x49e <free+0x8c>
 482:	8d 91       	ld	r24, X+
 484:	9c 91       	ld	r25, X
 486:	11 97       	sbiw	r26, 0x01	; 1
 488:	84 0f       	add	r24, r20
 48a:	95 1f       	adc	r25, r21
 48c:	02 96       	adiw	r24, 0x02	; 2
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	80 83       	st	Z, r24
 492:	12 96       	adiw	r26, 0x02	; 2
 494:	8d 91       	ld	r24, X+
 496:	9c 91       	ld	r25, X
 498:	13 97       	sbiw	r26, 0x03	; 3
 49a:	93 83       	std	Z+3, r25	; 0x03
 49c:	82 83       	std	Z+2, r24	; 0x02
 49e:	21 15       	cp	r18, r1
 4a0:	31 05       	cpc	r19, r1
 4a2:	29 f4       	brne	.+10     	; 0x4ae <free+0x9c>
 4a4:	f0 93 09 01 	sts	0x0109, r31
 4a8:	e0 93 08 01 	sts	0x0108, r30
 4ac:	3e c0       	rjmp	.+124    	; 0x52a <free+0x118>
 4ae:	d9 01       	movw	r26, r18
 4b0:	13 96       	adiw	r26, 0x03	; 3
 4b2:	fc 93       	st	X, r31
 4b4:	ee 93       	st	-X, r30
 4b6:	12 97       	sbiw	r26, 0x02	; 2
 4b8:	4d 91       	ld	r20, X+
 4ba:	5d 91       	ld	r21, X+
 4bc:	a4 0f       	add	r26, r20
 4be:	b5 1f       	adc	r27, r21
 4c0:	ea 17       	cp	r30, r26
 4c2:	fb 07       	cpc	r31, r27
 4c4:	79 f4       	brne	.+30     	; 0x4e4 <free+0xd2>
 4c6:	80 81       	ld	r24, Z
 4c8:	91 81       	ldd	r25, Z+1	; 0x01
 4ca:	84 0f       	add	r24, r20
 4cc:	95 1f       	adc	r25, r21
 4ce:	02 96       	adiw	r24, 0x02	; 2
 4d0:	d9 01       	movw	r26, r18
 4d2:	11 96       	adiw	r26, 0x01	; 1
 4d4:	9c 93       	st	X, r25
 4d6:	8e 93       	st	-X, r24
 4d8:	82 81       	ldd	r24, Z+2	; 0x02
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	13 96       	adiw	r26, 0x03	; 3
 4de:	9c 93       	st	X, r25
 4e0:	8e 93       	st	-X, r24
 4e2:	12 97       	sbiw	r26, 0x02	; 2
 4e4:	e0 e0       	ldi	r30, 0x00	; 0
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ea:	9b 81       	ldd	r25, Y+3	; 0x03
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <free+0xe4>
 4f0:	fe 01       	movw	r30, r28
 4f2:	ec 01       	movw	r28, r24
 4f4:	f9 cf       	rjmp	.-14     	; 0x4e8 <free+0xd6>
 4f6:	ce 01       	movw	r24, r28
 4f8:	02 96       	adiw	r24, 0x02	; 2
 4fa:	28 81       	ld	r18, Y
 4fc:	39 81       	ldd	r19, Y+1	; 0x01
 4fe:	82 0f       	add	r24, r18
 500:	93 1f       	adc	r25, r19
 502:	20 91 06 01 	lds	r18, 0x0106
 506:	30 91 07 01 	lds	r19, 0x0107
 50a:	28 17       	cp	r18, r24
 50c:	39 07       	cpc	r19, r25
 50e:	69 f4       	brne	.+26     	; 0x52a <free+0x118>
 510:	30 97       	sbiw	r30, 0x00	; 0
 512:	29 f4       	brne	.+10     	; 0x51e <free+0x10c>
 514:	10 92 09 01 	sts	0x0109, r1
 518:	10 92 08 01 	sts	0x0108, r1
 51c:	02 c0       	rjmp	.+4      	; 0x522 <free+0x110>
 51e:	13 82       	std	Z+3, r1	; 0x03
 520:	12 82       	std	Z+2, r1	; 0x02
 522:	d0 93 07 01 	sts	0x0107, r29
 526:	c0 93 06 01 	sts	0x0106, r28
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
