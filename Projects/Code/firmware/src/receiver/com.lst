   1               		.file	"com.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.initUART,"ax",@progbits
  11               	.global	initUART
  13               	initUART:
  14               	.LFB11:
  15               		.file 1 "com.c"
   1:com.c         **** /**************************************************
   2:com.c         **** Written By: Tanner Christensen
   3:com.c         **** 
   4:com.c         **** Program Description:
   5:com.c         **** This is a basic example program for a MCU driving
   6:com.c         **** a Nordic 2.4ghz tranceiver. This function receivers
   7:com.c         **** an 8 byte packet from a transmitter and sends it
   8:com.c         **** via UART
   9:com.c         **** **************************************************/
  10:com.c         **** 
  11:com.c         **** 
  12:com.c         **** 
  13:com.c         **** #define F_CPU 8000000
  14:com.c         **** 
  15:com.c         **** #include <avr/io.h>
  16:com.c         **** #include <avr/pgmspace.h>
  17:com.c         **** #include <avr/interrupt.h>
  18:com.c         **** #include <util/delay.h>
  19:com.c         **** #include <avr/cpufunc.h>
  20:com.c         **** #include "../../lib/spi/spi.h"
  21:com.c         **** #include <stdlib.h>
  22:com.c         **** #include "../../lib/radio_control/radioctl.h"
  23:com.c         **** 
  24:com.c         **** // Teensy 2.0: LED is active high
  25:com.c         **** #if defined(__AVR_ATmega32U4__) || defined(__AVR_AT90USB1286__)
  26:com.c         **** #define LED_ON		(PORTD |= (1<<6))
  27:com.c         **** #define LED_OFF		(PORTD &= ~(1<<6))
  28:com.c         **** 
  29:com.c         **** // Teensy 1.0: LED is active low
  30:com.c         **** #else
  31:com.c         **** #define LED_ON	(PORTD &= ~(1<<6))
  32:com.c         **** #define LED_OFF	(PORTD |= (1<<6))
  33:com.c         **** #endif
  34:com.c         **** 
  35:com.c         **** #define ADC_PRESCALER 0
  36:com.c         **** #define LED_CONFIG	(DDRD |= (1<<6))
  37:com.c         **** #define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
  38:com.c         **** #define DIT 80		/* unit time for mors e code */
  39:com.c         **** #define BAUD_RATE 38.4k
  40:com.c         **** #define F_CPU 8000000
  41:com.c         **** #define PACKET_SIZE 16
  42:com.c         **** 
  43:com.c         **** void initUART(void)
  44:com.c         **** {
  16               		.loc 1 44 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  45:com.c         **** 	//UBRR1 = (F_CPU / 4/ baud - 1) / 2;
  46:com.c         **** 	UBRR1 = 25;  //38.4k baud
  22               		.loc 1 46 0
  23 0000 89E1      		ldi r24,lo8(25)
  24 0002 90E0      		ldi r25,0
  25 0004 9093 CD00 		sts 204+1,r25
  26 0008 8093 CC00 		sts 204,r24
  47:com.c         **** 	UCSR1A = (1<<U2X1);
  27               		.loc 1 47 0
  28 000c 82E0      		ldi r24,lo8(2)
  29 000e 8093 C800 		sts 200,r24
  48:com.c         ****   	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
  30               		.loc 1 48 0
  31 0012 88E1      		ldi r24,lo8(24)
  32 0014 8093 C900 		sts 201,r24
  49:com.c         **** 	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);  //1 stop bit
  33               		.loc 1 49 0
  34 0018 86E0      		ldi r24,lo8(6)
  35 001a 8093 CA00 		sts 202,r24
  36 001e 0895      		ret
  37               		.cfi_endproc
  38               	.LFE11:
  40               		.section	.text.startup.main,"ax",@progbits
  41               	.global	main
  43               	main:
  44               	.LFB12:
  50:com.c         **** }
  51:com.c         **** 
  52:com.c         **** 
  53:com.c         **** 
  54:com.c         **** int main(void)
  55:com.c         **** {
  45               		.loc 1 55 0
  46               		.cfi_startproc
  47 0000 CF93      		push r28
  48               	.LCFI0:
  49               		.cfi_def_cfa_offset 3
  50               		.cfi_offset 28, -2
  51 0002 DF93      		push r29
  52               	.LCFI1:
  53               		.cfi_def_cfa_offset 4
  54               		.cfi_offset 29, -3
  55 0004 1F92      		push __zero_reg__
  56               	.LCFI2:
  57               		.cfi_def_cfa_offset 5
  58 0006 CDB7      		in r28,__SP_L__
  59 0008 DEB7      		in r29,__SP_H__
  60               	.LCFI3:
  61               		.cfi_def_cfa_register 28
  62               	/* prologue: function */
  63               	/* frame size = 1 */
  64               	/* stack size = 3 */
  65               	.L__stack_usage = 3
  56:com.c         **** 
  57:com.c         **** 	uint8_t *load = (uint8_t *)malloc(PACKET_SIZE*sizeof(uint8_t));
  66               		.loc 1 57 0
  67 000a 80E1      		ldi r24,lo8(16)
  68 000c 90E0      		ldi r25,0
  69 000e 0E94 0000 		call malloc
  70               	.LVL0:
  71 0012 082F      		mov r16,r24
  72 0014 F92E      		mov r15,r25
  73               	.LVL1:
  58:com.c         **** 
  59:com.c         **** 
  60:com.c         **** 	CPU_PRESCALE(0x01);  // run at 8 MHz
  74               		.loc 1 60 0
  75 0016 80E8      		ldi r24,lo8(-128)
  76 0018 8093 6100 		sts 97,r24
  77 001c 81E0      		ldi r24,lo8(1)
  78 001e 8093 6100 		sts 97,r24
  61:com.c         **** 
  62:com.c         **** 	INIT_CSN;
  79               		.loc 1 62 0
  80 0022 849A      		sbi 0x10,4
  63:com.c         **** 	INIT_CE;
  81               		.loc 1 63 0
  82 0024 819A      		sbi 0x10,1
  64:com.c         **** 	CSN_HIGH;
  83               		.loc 1 64 0
  84 0026 8C9A      		sbi 0x11,4
  65:com.c         **** 	CE_HIGH;
  85               		.loc 1 65 0
  86 0028 899A      		sbi 0x11,1
  66:com.c         **** 
  67:com.c         **** 
  68:com.c         **** 	initUART();
  87               		.loc 1 68 0
  88 002a 0E94 0000 		call initUART
  89               	.LVL2:
  69:com.c         **** 
  70:com.c         **** 	// Put receiver in sleep mode
  71:com.c         **** 
  72:com.c         **** 	SPI_masterInit();
  90               		.loc 1 72 0
  91 002e 0E94 0000 		call SPI_masterInit
  92               	.LVL3:
  73:com.c         **** 	initRadioRX();
  93               		.loc 1 73 0
  94 0032 0E94 0000 		call initRadioRX
  95               	.LVL4:
  74:com.c         **** 
  75:com.c         **** 	setRadioAddressWidth(THREE_BYTES);
  96               		.loc 1 75 0
  97 0036 81E0      		ldi r24,lo8(1)
  98 0038 0E94 0000 		call setRadioAddressWidth
  99               	.LVL5:
  76:com.c         **** 	setRadioRXAddress(0xABC123);
 100               		.loc 1 76 0
 101 003c 63E2      		ldi r22,lo8(35)
 102 003e 71EC      		ldi r23,lo8(-63)
 103 0040 8BEA      		ldi r24,lo8(-85)
 104 0042 90E0      		ldi r25,0
 105 0044 0E94 0000 		call setRadioRXAddress
 106               	.LVL6:
  77:com.c         **** 	setRadioRXPayloadSize(DATA_PIPE_0, PACKET_SIZE);
 107               		.loc 1 77 0
 108 0048 60E1      		ldi r22,lo8(16)
 109 004a 81E1      		ldi r24,lo8(17)
 110 004c 0E94 0000 		call setRadioRXPayloadSize
 111               	.LVL7:
 112               	.LBB8:
 113               	.LBB9:
 114               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 115               		.loc 2 163 0
 116 0050 8FE0      		ldi r24,lo8(9999)
 117 0052 97E2      		ldi r25,hi8(9999)
 118 0054 0197      		1: sbiw r24,1
 119 0056 01F4      		brne 1b
 120 0058 00C0      		rjmp .
 121 005a 0000      		nop
 122               	.LVL8:
 123               	.LBE9:
 124               	.LBE8:
  78:com.c         **** 
  79:com.c         **** 	_delay_ms(5);
  80:com.c         **** 
  81:com.c         ****   	int8_t radioFrequency = 0b00000000;
  82:com.c         ****   	setRadioFrequency(radioFrequency);
 125               		.loc 1 82 0
 126 005c 80E0      		ldi r24,0
 127 005e 0E94 0000 		call setRadioFrequency
 128               	.LVL9:
  81:com.c         ****   	int8_t radioFrequency = 0b00000000;
 129               		.loc 1 81 0
 130 0062 10E0      		ldi r17,0
 131               	.LVL10:
 132               	.L9:
 133               	.LBB10:
  83:com.c         **** 
  84:com.c         **** 	while (1) {
  85:com.c         **** 
  86:com.c         **** 
  87:com.c         **** 		uint8_t radioStatus = 0;
 134               		.loc 1 87 0
 135 0064 1982      		std Y+1,__zero_reg__
  88:com.c         **** 
  89:com.c         **** 		getRadioStatus(&radioStatus);
 136               		.loc 1 89 0
 137 0066 CE01      		movw r24,r28
 138 0068 0196      		adiw r24,1
 139 006a 0E94 0000 		call getRadioStatus
 140               	.LVL11:
  90:com.c         **** 
  91:com.c         **** 		if(getRX_DR())  // if RX data received
 141               		.loc 1 91 0
 142 006e 0E94 0000 		call getRX_DR
 143               	.LVL12:
 144 0072 8823      		tst r24
 145 0074 01F0      		breq .L3
  92:com.c         **** 		{
  93:com.c         **** 			clearRX_DR();
 146               		.loc 1 93 0
 147 0076 0E94 0000 		call clearRX_DR
 148               	.LVL13:
  94:com.c         **** 
  95:com.c         ****       		getRadioRXPayload(load, PACKET_SIZE); //read payload
 149               		.loc 1 95 0
 150 007a 60E1      		ldi r22,lo8(16)
 151 007c 802F      		mov r24,r16
 152 007e 9F2D      		mov r25,r15
 153 0080 0E94 0000 		call getRadioRXPayload
 154               	.LVL14:
  96:com.c         **** 
  97:com.c         **** 			CE_LOW;
 155               		.loc 1 97 0
 156 0084 8998      		cbi 0x11,1
 157               	.LVL15:
 158 0086 E02F      		mov r30,r16
 159 0088 FF2D      		mov r31,r15
 160               	.LBB11:
  98:com.c         **** 
  99:com.c         **** 			for(int i = 0; i<PACKET_SIZE; i++)
 161               		.loc 1 99 0
 162 008a 20E0      		ldi r18,0
 163 008c 30E0      		ldi r19,0
 164               	.LVL16:
 165               	.L5:
 100:com.c         **** 			{
 101:com.c         ****        		while(!(UCSR1A & (1 << UDRE1)));
 166               		.loc 1 101 0 discriminator 1
 167 008e 8091 C800 		lds r24,200
 168 0092 85FF      		sbrs r24,5
 169 0094 00C0      		rjmp .L5
 102:com.c         ****         	UDR1 = load[i];
 170               		.loc 1 102 0
 171 0096 8191      		ld r24,Z+
 172 0098 8093 CE00 		sts 206,r24
  99:com.c         **** 			for(int i = 0; i<PACKET_SIZE; i++)
 173               		.loc 1 99 0
 174 009c 2F5F      		subi r18,-1
 175 009e 3F4F      		sbci r19,-1
 176               	.LVL17:
 177 00a0 2031      		cpi r18,16
 178 00a2 3105      		cpc r19,__zero_reg__
 179 00a4 01F4      		brne .L5
 180               	.LBE11:
 103:com.c         **** 			}
 104:com.c         **** 
 105:com.c         **** 			CE_HIGH;
 181               		.loc 1 105 0
 182 00a6 899A      		sbi 0x11,1
 183               	.LVL18:
 184               	.L3:
 106:com.c         **** 		}
 107:com.c         **** 
 108:com.c         ****     /* while(!(UCSR1A & (1 << UDRE1))); */
 109:com.c         ****     /* UDR1 = radioStatus; */
 110:com.c         **** 
 111:com.c         **** 		
 112:com.c         ****     	radioFrequency += 0b00000001;
 185               		.loc 1 112 0
 186 00a8 1F5F      		subi r17,lo8(-(1))
 187               	.LVL19:
 113:com.c         ****     	if (radioFrequency == 30) {
 188               		.loc 1 113 0
 189 00aa 1E31      		cpi r17,lo8(30)
 190 00ac 01F4      		brne .L8
 114:com.c         ****       		radioFrequency = 0b00000000;
 191               		.loc 1 114 0
 192 00ae 10E0      		ldi r17,0
 193               	.LVL20:
 194               	.L8:
 115:com.c         ****     	}
 116:com.c         ****     	setRadioFrequency(radioFrequency); 
 195               		.loc 1 116 0
 196 00b0 812F      		mov r24,r17
 197 00b2 0E94 0000 		call setRadioFrequency
 198               	.LVL21:
 199               	.LBB12:
 200               	.LBB13:
 201               		.loc 2 163 0
 202 00b6 8FE7      		ldi r24,lo8(15999)
 203 00b8 9EE3      		ldi r25,hi8(15999)
 204 00ba 0197      		1: sbiw r24,1
 205 00bc 01F4      		brne 1b
 206 00be 00C0      		rjmp .
 207 00c0 0000      		nop
 208               	.LBE13:
 209               	.LBE12:
 210               	.LBE10:
 117:com.c         ****     	_delay_ms(8);
 118:com.c         **** 	}
 211               		.loc 1 118 0
 212 00c2 00C0      		rjmp .L9
 213               		.cfi_endproc
 214               	.LFE12:
 216               		.text
 217               	.Letext0:
 218               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 219               		.file 4 "/usr/local/CrossPack-AVR-20131216/lib/gcc/avr/4.8.1/include/stddef.h"
 220               		.file 5 "../../lib/radio_control/radioctl.h"
 221               		.file 6 "../../lib/spi/spi.h"
 222               		.file 7 "/usr/local/CrossPack-AVR-20131216/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 com.c
/var/folders/bf/hc8vmr6j0tv7nttm56xxh_r80000gn/T//ccSGdz3A.s:2      *ABS*:0000003e __SP_H__
/var/folders/bf/hc8vmr6j0tv7nttm56xxh_r80000gn/T//ccSGdz3A.s:3      *ABS*:0000003d __SP_L__
/var/folders/bf/hc8vmr6j0tv7nttm56xxh_r80000gn/T//ccSGdz3A.s:4      *ABS*:0000003f __SREG__
/var/folders/bf/hc8vmr6j0tv7nttm56xxh_r80000gn/T//ccSGdz3A.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/bf/hc8vmr6j0tv7nttm56xxh_r80000gn/T//ccSGdz3A.s:6      *ABS*:00000001 __zero_reg__
/var/folders/bf/hc8vmr6j0tv7nttm56xxh_r80000gn/T//ccSGdz3A.s:13     .text.initUART:00000000 initUART
/var/folders/bf/hc8vmr6j0tv7nttm56xxh_r80000gn/T//ccSGdz3A.s:43     .text.startup.main:00000000 main

UNDEFINED SYMBOLS
malloc
SPI_masterInit
initRadioRX
setRadioAddressWidth
setRadioRXAddress
setRadioRXPayloadSize
setRadioFrequency
getRadioStatus
getRX_DR
clearRX_DR
getRadioRXPayload
